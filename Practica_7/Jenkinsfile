pipeline {
  agent any
  environment {
    VITE_STUDENT1ID = credentials('id-s1')
    VITE_STUDENT1NICKNAME = credentials('nickname-s1')
    VITE_STUDENT1NAME = credentials('name-s1')
    VITE_STUDENT1IMG = credentials('img-s1')

    VITE_STUDENT2ID= credentials('id-s2')
    VITE_STUDENT2NICKNAME= credentials('nickname-s2')
    VITE_STUDENT2NAME= credentials('name-s2')
    VITE_STUDENT2IMG= credentials('img-s2')

    DOKERHUB_PWD = credentials('dockerhub-pwd')
  }

  parameters {
    string(name: 'container_name', defaultValue: 'practica7', description: 'Nombre del contenedor')
    string(name: 'image_name', defaultValue: 'pareja3', description: 'Nombre de la imagen')
    string(name: 'image_tag', defaultValue: 'latest', description: 'Etiqueta de la imagen')
    string(name: 'container_port', defaultValue: '80', description: 'Puerto a publicar')
    string(name: 'dockerhub_id', defaultValue: '201800726', description: 'Usuario Docker Hub')
  }

  stages {
    stage('Build') {
      steps {
        script{
          sh '''
            cd Practica_7
            docker build \
              --build-arg VITE_STUDENT1ID=${VITE_STUDENT1ID} \
              --build-arg VITE_STUDENT1NICKNAME=${VITE_STUDENT1NICKNAME} \
              --build-arg VITE_STUDENT1NAME="${VITE_STUDENT1NAME}" \
              --build-arg VITE_STUDENT1IMG=${VITE_STUDENT1IMG} \
              --build-arg VITE_STUDENT2ID=${VITE_STUDENT2ID} \
              --build-arg VITE_STUDENT2NICKNAME=${VITE_STUDENT2NICKNAME} \
              --build-arg VITE_STUDENT2NAME="${VITE_STUDENT2NAME}" \
              --build-arg VITE_STUDENT2IMG=${VITE_STUDENT2IMG} \
              -t ${dockerhub_id}/${image_name}:${image_tag} .
          '''
        }
      }
    }

    stage('Test') {
      steps {
        script{
          sh '''
            cd Practica_7
            npm install
            npm run test
          '''
        }
      }
    }

    stage('Deploy Pruebas') {
      steps {
        script{
          sh '''
            docker stop ${container_name} || true
            docker rm ${container_name} || true
            docker run -d -p 8081:${container_port} \
              --restart always \
              --name ${container_name} ${dockerhub_id}/${image_name}:${image_tag}
            docker system prune -f
          '''
        }
      }
    }

    stage('Docker Hub Push') {
      steps {
        script{
          sh '''
            docker login -u ${dockerhub_id} -p ${DOKERHUB_PWD}
            docker push ${dockerhub_id}/${image_name}:${image_tag}
          '''
        }
      }
    }

    stage('Deploy Produccion') {
      steps {
        script{
          sh '''
            terraform init -reconfigure
            terraform validate
            terraform apply -input=false -auto-approve --destroy
            terraform plan -lock=false -out "planfile"
            terraform apply -lock=false -input=false "planfile"
          '''
        }
      }
    }
  }
}
